<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风屿の博客</title>
  <icon>https://mingkwind.github.io/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mingkwind.github.io/"/>
  <updated>2022-04-25T02:26:21.407Z</updated>
  <id>https://mingkwind.github.io/</id>
  
  <author>
    <name>Mingkwind</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang之协程复用</title>
    <link href="https://mingkwind.github.io/posts/41521440/"/>
    <id>https://mingkwind.github.io/posts/41521440/</id>
    <published>2022-04-24T16:31:13.000Z</published>
    <updated>2022-04-25T02:26:21.407Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang的channel死锁问题</title>
    <link href="https://mingkwind.github.io/posts/5076df4a/"/>
    <id>https://mingkwind.github.io/posts/5076df4a/</id>
    <published>2022-04-24T10:43:42.000Z</published>
    <updated>2022-04-25T02:28:33.739Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;channel-介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#channel-介绍&quot;&gt;&lt;/a&gt; Channel 介绍&lt;/h1&gt;
&lt;h2 id=&quot;默认channel&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#默认channel&quot;&gt;&lt;/a&gt; 默认channel&lt;/h2&gt;
&lt;p&gt;默认情况下创建的channel是阻塞和不带缓冲区的，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// 创建一个阻塞的不带缓冲区的channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过默认方式创建的channel有以下性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送操作将会阻塞，直到接收端准备好了。&lt;/li&gt;
&lt;li&gt;接收操作将会阻塞，直到发送端准备好了。也就是说：若channel中没有数据，接收者将会阻塞。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;带缓冲区的channel&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#带缓冲区的channel&quot;&gt;&lt;/a&gt; 带缓冲区的Channel&lt;/h2&gt;
&lt;p&gt;不带缓冲区的channel只能包含一个元素(一条记录)，带缓冲区的channel可以包含多条记录&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// 此时的ch，类似一个消息队列，可以容纳100个string类型的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;向带缓冲区的channel写数据时不会阻塞，直到channel的缓冲区满了&lt;/li&gt;
&lt;li&gt;从带缓冲区的channel中读数据也不会阻塞，直到缓冲区为空&lt;/li&gt;
&lt;li&gt;从带缓冲区的channel中读取或写入数据时，是异步的，类比使用消息队列写入和读取数据&lt;/li&gt;
&lt;li&gt;向带缓冲区的channel中写数据时是FIFO顺序进行的&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://mingkwind.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://mingkwind.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang之Web爬虫练习</title>
    <link href="https://mingkwind.github.io/posts/ca9bd683/"/>
    <id>https://mingkwind.github.io/posts/ca9bd683/</id>
    <published>2022-04-20T06:42:47.000Z</published>
    <updated>2022-04-23T15:59:48.439Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://tour.go-zh.org/&quot;&gt;go编程指南&lt;/a&gt;的题目&lt;/p&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;https://tour.go-zh.org/concurrency/10&quot;&gt;https://tour.go-zh.org/concurrency/10&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;练习：Web 爬虫&lt;/p&gt;
&lt;p&gt;在这个练习中，我们将会使用 Go 的并发特性来并行化一个 Web 爬虫。&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;Crawl&lt;/code&gt; 函数来并行地抓取 URL，并且保证不重复。&lt;/p&gt;
&lt;p&gt;提示：你可以用一个 map 来缓存已经获取的 URL，但是要注意 map 本身并不是并发安全的！&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://mingkwind.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://mingkwind.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang之等价二叉查找树</title>
    <link href="https://mingkwind.github.io/posts/8cb9068c/"/>
    <id>https://mingkwind.github.io/posts/8cb9068c/</id>
    <published>2022-04-20T06:42:30.000Z</published>
    <updated>2022-04-20T07:08:14.126Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://tour.go-zh.org/&quot;&gt;go编程指南&lt;/a&gt;的题目&lt;/p&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;https://tour.go-zh.org/concurrency/8&quot;&gt;https://tour.go-zh.org/concurrency/8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;练习：等价二叉查找树&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; 实现 &lt;code&gt;Walk&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; 测试 &lt;code&gt;Walk&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;函数 &lt;code&gt;tree.New(k)&lt;/code&gt; 用于构造一个随机结构的已排序二叉查找树，它保存了值 &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;2k&lt;/code&gt;, &lt;code&gt;3k&lt;/code&gt;, …, &lt;code&gt;10k&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;创建一个新的信道 &lt;code&gt;ch&lt;/code&gt; 并且对其进行步进：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go Walk(tree.New(1), ch)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后从信道中读取并打印 10 个值。应当是数字 &lt;code&gt;1, 2, 3, ..., 10&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; 用 &lt;code&gt;Walk&lt;/code&gt; 实现 &lt;code&gt;Same&lt;/code&gt; 函数来检测 &lt;code&gt;t1&lt;/code&gt; 和 &lt;code&gt;t2&lt;/code&gt; 是否存储了相同的值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; 测试 &lt;code&gt;Same&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Same(tree.New(1), tree.New(1))&lt;/code&gt; 应当返回 &lt;code&gt;true&lt;/code&gt;，而 &lt;code&gt;Same(tree.New(1), tree.New(2))&lt;/code&gt; 应当返回 &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Tree&lt;/code&gt; 的文档可在&lt;a href=&quot;https://godoc.org/golang.org/x/tour/tree#Tree&quot;&gt;这里&lt;/a&gt;找到。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://mingkwind.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://mingkwind.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang之图像练习</title>
    <link href="https://mingkwind.github.io/posts/9d953bb4/"/>
    <id>https://mingkwind.github.io/posts/9d953bb4/</id>
    <published>2022-04-20T06:39:31.000Z</published>
    <updated>2022-04-20T07:08:14.126Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://tour.go-zh.org/&quot;&gt;go编程指南&lt;/a&gt;的题目&lt;/p&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;https://tour.go-zh.org/methods/25&quot;&gt;https://tour.go-zh.org/methods/25&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;练习：图像&lt;/p&gt;
&lt;p&gt;还记得之前编写的&lt;a href=&quot;https://tour.go-zh.org/moretypes/18&quot;&gt;图片生成器&lt;/a&gt; 吗？我们再来编写另外一个，不过这次它将会返回一个 &lt;code&gt;image.Image&lt;/code&gt; 的实现而非一个数据切片。&lt;/p&gt;
&lt;p&gt;定义你自己的 &lt;code&gt;Image&lt;/code&gt; 类型，实现&lt;a href=&quot;https://go-zh.org/pkg/image/#Image&quot;&gt;必要的方法&lt;/a&gt;并调用 &lt;code&gt;pic.ShowImage&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Bounds&lt;/code&gt; 应当返回一个 &lt;code&gt;image.Rectangle&lt;/code&gt; ，例如 &lt;code&gt;image.Rect(0, 0, w, h)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ColorModel&lt;/code&gt; 应当返回 &lt;code&gt;color.RGBAModel&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;At&lt;/code&gt; 应当返回一个颜色。上一个图片生成器的值 &lt;code&gt;v&lt;/code&gt; 对应于此次的 &lt;code&gt;color.RGBA{v, v, 255, 255}&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://mingkwind.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://mingkwind.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang之rot13Reader练习</title>
    <link href="https://mingkwind.github.io/posts/75c4d0b7/"/>
    <id>https://mingkwind.github.io/posts/75c4d0b7/</id>
    <published>2022-04-20T06:35:55.000Z</published>
    <updated>2022-04-20T07:08:14.125Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://tour.go-zh.org/&quot;&gt;go编程指南&lt;/a&gt;的题目&lt;/p&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;https://tour.go-zh.org/methods/23&quot;&gt;https://tour.go-zh.org/methods/23&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;练习：rot13Reader&lt;/p&gt;
&lt;p&gt;有种常见的模式是一个 &lt;a href=&quot;https://go-zh.org/pkg/io/#Reader&quot;&gt;&lt;code&gt;io.Reader&lt;/code&gt;&lt;/a&gt; 包装另一个 &lt;code&gt;io.Reader&lt;/code&gt;，然后通过某种方式修改其数据流。&lt;/p&gt;
&lt;p&gt;例如，&lt;a href=&quot;https://go-zh.org/pkg/compress/gzip/#NewReader&quot;&gt;&lt;code&gt;gzip.NewReader&lt;/code&gt;&lt;/a&gt; 函数接受一个 &lt;code&gt;io.Reader&lt;/code&gt;（已压缩的数据流）并返回一个同样实现了 &lt;code&gt;io.Reader&lt;/code&gt; 的 &lt;code&gt;*gzip.Reader&lt;/code&gt;（解压后的数据流）。&lt;/p&gt;
&lt;p&gt;编写一个实现了 &lt;code&gt;io.Reader&lt;/code&gt; 并从另一个 &lt;code&gt;io.Reader&lt;/code&gt; 中读取数据的 &lt;code&gt;rot13Reader&lt;/code&gt;，通过应用 &lt;a href=&quot;http://en.wikipedia.org/wiki/ROT13&quot;&gt;rot13&lt;/a&gt; 代换密码对数据流进行修改。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rot13Reader&lt;/code&gt; 类型已经提供。实现 &lt;code&gt;Read&lt;/code&gt; 方法以满足 &lt;code&gt;io.Reader&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://mingkwind.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://mingkwind.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang之Reader练习</title>
    <link href="https://mingkwind.github.io/posts/d9747082/"/>
    <id>https://mingkwind.github.io/posts/d9747082/</id>
    <published>2022-04-20T06:34:04.000Z</published>
    <updated>2022-04-20T07:08:14.120Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://tour.go-zh.org/&quot;&gt;go编程指南&lt;/a&gt;的题目&lt;/p&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;https://tour.go-zh.org/methods/22&quot;&gt;https://tour.go-zh.org/methods/22&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;练习：Reader&lt;/p&gt;
&lt;p&gt;实现一个 &lt;code&gt;Reader&lt;/code&gt; 类型，它产生一个 ASCII 字符 &lt;code&gt;&#39;A&#39;&lt;/code&gt; 的无限流。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://mingkwind.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://mingkwind.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang之错误练习</title>
    <link href="https://mingkwind.github.io/posts/36cd3388/"/>
    <id>https://mingkwind.github.io/posts/36cd3388/</id>
    <published>2022-04-20T06:32:23.000Z</published>
    <updated>2022-04-20T07:08:14.127Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://tour.go-zh.org/&quot;&gt;go编程指南&lt;/a&gt;的题目&lt;/p&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;https://tour.go-zh.org/methods/20&quot;&gt;https://tour.go-zh.org/methods/20&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;练习：错误&lt;/p&gt;
&lt;p&gt;从&lt;a href=&quot;https://tour.go-zh.org/flowcontrol/8&quot;&gt;之前的练习&lt;/a&gt;中复制 &lt;code&gt;Sqrt&lt;/code&gt; 函数，修改它使其返回 &lt;code&gt;error&lt;/code&gt; 值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Sqrt&lt;/code&gt; 接受到一个负数时，应当返回一个非 nil 的错误值。复数同样也不被支持。&lt;/p&gt;
&lt;p&gt;创建一个新的类型&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;type ErrNegativeSqrt float64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;并为其实现&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func (e ErrNegativeSqrt) Error() string&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;方法使其拥有 &lt;code&gt;error&lt;/code&gt; 值，通过 &lt;code&gt;ErrNegativeSqrt(-2).Error()&lt;/code&gt; 调用该方法应返回 &lt;code&gt;&amp;quot;cannot Sqrt negative number: -2&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; 在 &lt;code&gt;Error&lt;/code&gt; 方法内调用 &lt;code&gt;fmt.Sprint(e)&lt;/code&gt; 会让程序陷入死循环。可以通过先转换 &lt;code&gt;e&lt;/code&gt; 来避免这个问题：&lt;code&gt;fmt.Sprint(float64(e))&lt;/code&gt;。这是为什么呢？&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;Sqrt&lt;/code&gt; 函数，使其接受一个负数时，返回 &lt;code&gt;ErrNegativeSqrt&lt;/code&gt; 值。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://mingkwind.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://mingkwind.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang之Stringer练习</title>
    <link href="https://mingkwind.github.io/posts/283b96fc/"/>
    <id>https://mingkwind.github.io/posts/283b96fc/</id>
    <published>2022-04-20T06:29:50.000Z</published>
    <updated>2022-04-20T07:08:14.122Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://tour.go-zh.org/&quot;&gt;go编程指南&lt;/a&gt;的题目&lt;/p&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;https://tour.go-zh.org/methods/18&quot;&gt;https://tour.go-zh.org/methods/18&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;练习：Stringer&lt;/p&gt;
&lt;p&gt;通过让 &lt;code&gt;IPAddr&lt;/code&gt; 类型实现 &lt;code&gt;fmt.Stringer&lt;/code&gt; 来打印点号分隔的地址。&lt;/p&gt;
&lt;p&gt;例如，&lt;code&gt;IPAddr{1, 2, 3, 4}&lt;/code&gt; 应当打印为 &lt;code&gt;&amp;quot;1.2.3.4&amp;quot;&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="https://mingkwind.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://mingkwind.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>安装部署disem项目</title>
    <link href="https://mingkwind.github.io/posts/4e008f20/"/>
    <id>https://mingkwind.github.io/posts/4e008f20/</id>
    <published>2022-04-12T13:49:18.000Z</published>
    <updated>2022-04-20T07:12:19.815Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;项目部署&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#项目部署&quot;&gt;&lt;/a&gt; 项目部署&lt;/h1&gt;
&lt;p&gt;偶然在推上看到这个github项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/posts/4e008f20/image-20220412215025909.png&quot; alt=&quot;image-20220412215025909&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web安全" scheme="https://mingkwind.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Web安全" scheme="https://mingkwind.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android调用动态链接库so</title>
    <link href="https://mingkwind.github.io/posts/225c7dcd/"/>
    <id>https://mingkwind.github.io/posts/225c7dcd/</id>
    <published>2022-04-10T07:26:41.000Z</published>
    <updated>2022-04-10T07:40:55.869Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前帮同学运行一个安卓的MNN模型.out可执行文件，附带两个动态链接库so，不知道如何运行&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/posts/225c7dcd/image-20220410153207850.png&quot; alt=&quot;image-20220410153207850&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://mingkwind.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://mingkwind.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>MaxOS安装sagemath</title>
    <link href="https://mingkwind.github.io/posts/baf217b6/"/>
    <id>https://mingkwind.github.io/posts/baf217b6/</id>
    <published>2022-04-10T07:03:24.000Z</published>
    <updated>2022-04-10T07:07:08.162Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;经过多次尝试，目前适合的sagemath版本为&lt;a href=&quot;http://mirror.hust.edu.cn/sagemath/osx/intel/sage-9.1-OSX_10.11.6-x86_64.app.dmg&quot;&gt;sage-9.1-OSX_10.11.6-x86_64.app.dmg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载后创建shell软链接&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo ln -s /Applications/SageMath-9.1.app/Contents/Resources/sage/sage /usr/local/bin/sage&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MacOS" scheme="https://mingkwind.github.io/categories/MacOS/"/>
    
    
      <category term="sagemath" scheme="https://mingkwind.github.io/tags/sagemath/"/>
    
  </entry>
  
  <entry>
    <title>关于RSA素数生成漏洞的CTF题</title>
    <link href="https://mingkwind.github.io/posts/6bf2a5bf/"/>
    <id>https://mingkwind.github.io/posts/6bf2a5bf/</id>
    <published>2020-08-11T16:51:18.000Z</published>
    <updated>2022-04-10T07:07:00.626Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;google-ctf-chunk-norris&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#google-ctf-chunk-norris&quot;&gt;&lt;/a&gt; Google CTF – CHUNK NORRIS&lt;/h1&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目&quot;&gt;&lt;/a&gt; 题目&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/posts/6bf2a5bf/image-20200824003337195.png&quot; alt=&quot;image-20200824003337195&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://mingkwind.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>uCoreOs lab8 实验报告</title>
    <link href="https://mingkwind.github.io/posts/7a4984ba/"/>
    <id>https://mingkwind.github.io/posts/7a4984ba/</id>
    <published>2020-05-30T14:06:10.000Z</published>
    <updated>2022-04-09T15:16:20.711Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实验目的&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#实验目的&quot;&gt;&lt;/a&gt; 实验目的&lt;/h1&gt;
&lt;p&gt;通过完成本次实验，希望能达到以下目标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解基本的文件系统系统调用的实现方法；&lt;/li&gt;
&lt;li&gt;了解一个基于索引节点组织方式的Simple FS文件系统的设计与实现；&lt;/li&gt;
&lt;li&gt;了解文件系统抽象层-VFS的设计与实现；&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://mingkwind.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="学习" scheme="https://mingkwind.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>uCoreOs lab7 实验报告</title>
    <link href="https://mingkwind.github.io/posts/2cdd304c/"/>
    <id>https://mingkwind.github.io/posts/2cdd304c/</id>
    <published>2020-05-30T08:12:02.000Z</published>
    <updated>2022-04-09T15:16:20.539Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实验目的&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#实验目的&quot;&gt;&lt;/a&gt; 实验目的&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;理解操作系统的同步互斥的设计实现；&lt;/li&gt;
&lt;li&gt;理解底层支撑技术：禁用中断、定时器、等待队列；&lt;/li&gt;
&lt;li&gt;在ucore中理解信号量（semaphore）机制的具体实现；&lt;/li&gt;
&lt;li&gt;理解管程机制，在ucore内核中增加基于管程（monitor）的条件变量（condition variable）的支持；&lt;/li&gt;
&lt;li&gt;了解经典进程同步问题，并能使用同步机制解决进程同步问题。&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://mingkwind.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="学习" scheme="https://mingkwind.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>uCoreOS lab6 实验报告</title>
    <link href="https://mingkwind.github.io/posts/48714bfd/"/>
    <id>https://mingkwind.github.io/posts/48714bfd/</id>
    <published>2020-05-02T11:30:23.000Z</published>
    <updated>2022-04-09T15:16:20.628Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实验目的&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#实验目的&quot;&gt;&lt;/a&gt; 实验目的&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;理解操作系统的调度管理机制&lt;/li&gt;
&lt;li&gt;熟悉 ucore 的系统调度器框架，以及缺省的Round-Robin 调度算法&lt;/li&gt;
&lt;li&gt;基于调度器框架实现一个(Stride Scheduling)调度算法来替换缺省的调度算法&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://mingkwind.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="学习" scheme="https://mingkwind.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>uCoreOs lab5 实验报告</title>
    <link href="https://mingkwind.github.io/posts/c606d982/"/>
    <id>https://mingkwind.github.io/posts/c606d982/</id>
    <published>2020-04-21T16:03:46.000Z</published>
    <updated>2022-04-09T15:16:20.687Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实验目的&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#实验目的&quot;&gt;&lt;/a&gt; 实验目的&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;了解第一个用户进程创建过程&lt;/li&gt;
&lt;li&gt;了解系统调用框架的实现机制&lt;/li&gt;
&lt;li&gt;了解ucore如何实现系统调用sys_fork/sys_exec/sys_exit/sys_wait来进行进程管理&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://mingkwind.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="学习" scheme="https://mingkwind.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>uCoreOs lab4 实验报告</title>
    <link href="https://mingkwind.github.io/posts/50bc1597/"/>
    <id>https://mingkwind.github.io/posts/50bc1597/</id>
    <published>2020-04-21T15:12:48.000Z</published>
    <updated>2022-04-09T15:16:20.970Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实验目的&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#实验目的&quot;&gt;&lt;/a&gt; 实验目的&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;了解内核线程创建/执行的管理过程&lt;/li&gt;
&lt;li&gt;了解内核线程的切换和基本调度过程&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://mingkwind.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="学习" scheme="https://mingkwind.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>iptables之服务器应急响应及提供服务器防御解决方案实验</title>
    <link href="https://mingkwind.github.io/posts/2f12bf9c/"/>
    <id>https://mingkwind.github.io/posts/2f12bf9c/</id>
    <published>2020-04-14T15:23:28.000Z</published>
    <updated>2022-04-09T15:16:20.927Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实验目的&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#实验目的&quot;&gt;&lt;/a&gt; 【实验目的】&lt;/h1&gt;
&lt;p&gt;参考实验场景及实验步骤完成服务器应急响应工作并重新为服务器部署策略。&lt;/p&gt;
    
    </summary>
    
    
      <category term="信息安全学习" scheme="https://mingkwind.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="iptables" scheme="https://mingkwind.github.io/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>uCoreOs lab3 实验报告</title>
    <link href="https://mingkwind.github.io/posts/69d005/"/>
    <id>https://mingkwind.github.io/posts/69d005/</id>
    <published>2020-04-10T04:09:22.000Z</published>
    <updated>2022-04-09T15:16:20.872Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实验目的&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#实验目的&quot;&gt;&lt;/a&gt; 实验目的&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;了解虚拟内存的Page Fault异常处理实现&lt;/li&gt;
&lt;li&gt;了解页替换算法在操作系统中的实现&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://mingkwind.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="学习" scheme="https://mingkwind.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
